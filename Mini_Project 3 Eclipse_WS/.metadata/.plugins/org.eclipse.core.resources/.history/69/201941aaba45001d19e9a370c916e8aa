/******************************************************************************
 *
 * Module: GPIO
 *
 * File Name: gpio.c
 *
 * Description: Source file for the AVR GPIO driver
 *
 * Author: Abdelrahman Ali Mohamed
 *
 *******************************************************************************/

#include "gpio.h"
#include "common_macros.h" /* To use the macros like SET_BIT */
#include "avr/io.h" /* To use the IO Ports Registers */

/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
		case PORTA_ID:
			SETUP_PIN_DIRECTION(port_num,pin_num,direction);
			break;
		case PORTB_ID:
			SETUP_PIN_DIRECTION(port_num,pin_num,direction);
			break;
		case PORTC_ID:
			SETUP_PIN_DIRECTION(port_num,pin_num,direction);
			break;
		case PORTD_ID:
			SETUP_PIN_DIRECTION(port_num,pin_num,direction);
			break;
		}
	}
}

/*
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {

	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
		/* Do Nothing */
	}
	else {
		switch (port_num) {
		case PORTA_ID:
			WRITE_BIT(port_num,pin_num,value);
			break;
		case PORTB_ID:
			WRITE_BIT(port_num,pin_num,value);
			break;
		case PORTC_ID:
			WRITE_BIT(port_num,pin_num,value);
			break;
		case PORTD_ID:
			WRITE_BIT(port_num,pin_num,value);
			break;
		}
	}
}

/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {

	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
		return LOGIC_LOW;
	} else {

		switch (port_num) {
		case PORTA_ID:
			return GET_BIT(PINA, pin_num);
		case PORTB_ID:
			return GET_BIT(PINB, pin_num);
		case PORTC_ID:
			return GET_BIT(PINC, pin_num);
		case PORTD_ID:
			return GET_BIT(PIND, pin_num);
		}
	}
	return 0;
}

/*
 * Description :
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
		case PORTA_ID:
			DDRA = direction;
			break;
		case PORTB_ID:
			DDRB = direction;
			break;
		case PORTC_ID:
			DDRC = direction;
			break;
		case PORTD_ID:
			DDRD = direction;
			break;
		}
	}
}

/*
 * Description :
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value) {

	if ((port_num >= NUM_OF_PORTS)) {
		/* do nothing */
	} else {
		switch (port_num) {
		case PORTA_ID:
			PORTA = value;
			break;
		case PORTB_ID:
			PORTB = value;
			break;
		case PORTC_ID:
			PORTC = value;
			break;
		case PORTD_ID:
			PORTD = value;
			break;
		}
	}
}

/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
	if ((port_num >= NUM_OF_PORTS)) {
		return 0;
	} else {
		switch (port_num) {
		case PORTA_ID:
			return PINA & 0xFF;
		case PORTB_ID:
			return PINB & 0xFF;
		case PORTC_ID:
			return PINC & 0xFF;
		case PORTD_ID:
			return PIND & 0xFF;
		}
	}
	return 0;
}
